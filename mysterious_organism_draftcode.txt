// Returns a random DNA base
const returnRandBase = () => {
  const dnaBases = ["A", "T", "C", "G"];
  return dnaBases[Math.floor(Math.random() * 4)];
};

// Returns a random single strand of DNA containing 15 bases
const mockUpStrand = () => {
  const newStrand = [];
  for (let i = 0; i < 15; i++) {
    newStrand.push(returnRandBase());
  }
  return newStrand;
};
//console.log(mockUpStrand());

const pAequorFactory = (specimenNum, dna) => {
  return {
    specimenNum: specimenNum,
    dna: dna,
    mutate() {
      let ranIndex = Math.floor(Math.random() * 15);
      let ranBase = this.dna[ranIndex];
      let baseArray = ["A", "T", "C", "G"];
      const index = baseArray.indexOf(ranBase);
      if (index > -1) {
        baseArray.splice(index, 1);
      }
      ranBase = baseArray[Math.floor(Math.random() * 3)];
      return this.dna.splice(ranIndex, 1, ranBase);
    },
  };
};

const firstAnimal = pAequorFactory(1, mockUpStrand());
console.log(firstAnimal.dna);
firstAnimal.mutate();
console.log(firstAnimal.dna);
